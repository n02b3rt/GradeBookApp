@page "/teacher/class/{ClassId:int}/students"
@rendermode InteractiveServer
@using GradeBookApp.Services
@using GradeBookApp.Shared
@inject TeacherActionsService TeacherService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation

<div class="container mt-4">
    <h2 class="mb-3" style="color: #f39c12;">
        <i class="bi bi-people-fill"></i> Uczniowie w klasie <strong>@ClassName</strong>
    </h2>

    <div class="mb-3 d-flex gap-2">
        <button class="btn btn-outline-primary" @onclick="@(() => Navigation.NavigateTo($"/teacher/grades/class/{ClassId}/add/{SubjectId}"))">
            <i class="bi bi-plus-circle"></i> Dodaj oceny całej klasie
        </button>
        <button class="btn btn-outline-secondary" @onclick="@(() => Navigation.NavigateTo($"/teacher/attendance/{ClassId}/{SubjectId}"))">
            <i class="bi bi-calendar-check"></i> Sprawdź obecność
        </button>
        <button class="btn btn-outline-info" @onclick="@(() => Navigation.NavigateTo($"/teacher/attendance/class/{ClassId}/{SubjectId}"))">
            <i class="bi bi-eye"></i> Zobacz obecności
        </button>
    </div>

    @if (loading)
    {
        <div class="alert alert-info">Ładowanie uczniów i ocen...</div>
    }
    else if (students == null || !students.Any())
    {
        <div class="alert alert-warning">Nie znaleziono uczniów.</div>
    }
    else
    {
        <table class="table table-bordered table-striped">
            <thead style="background-color: #f39c12; color: white;">
            <tr>
                <th>#</th>
                <th>Imię i nazwisko</th>
                <th>E-mail</th>
                <th>Oceny</th>
                <th>Średnia</th>
                <th>Akcje</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var (student, index) in students.Select((s, i) => (s, i + 1)))
            {
                <tr>
                    <td>@index</td>
                    <td>@student.FirstName @student.LastName</td>
                    <td>@student.Email</td>
                    <td>
                        @if (gradesByStudent.TryGetValue(student.Id, out var studentGrades) && studentGrades.Any())
                        {
                            foreach (var grade in studentGrades)
                            {
                                <span class="badge rounded-pill text-white me-1 mb-1"
                                      style="background-color: #f39c12; cursor: pointer;"
                                      title="@($"Wartość: {grade.Value}, Waga: {grade.Weight}, Opis: {grade.Description}, Data: {grade.DateGiven:yyyy-MM-dd}")"
                                      @onclick="() => ShowGradeModal(grade)">
                                    @grade.Value
                                </span>
                            }
                        }
                        else
                        {
                            <span class="text-muted">Brak ocen</span>
                        }
                    </td>
                    <td>
                        @if (gradesByStudent.TryGetValue(student.Id, out var grades) && grades.Any())
                        {
                            var totalWeight = grades.Sum(g => g.Weight);
                            var weightedSum = grades.Sum(g => g.Value * g.Weight);
                            var avg = totalWeight > 0 ? Math.Round((double)weightedSum / totalWeight, 2) : 0;
                            <span class="fw-bold">@avg</span>
                        }
                        else
                        {
                            <span class="text-muted">–</span>
                        }
                    </td>
                    <td>
                        <a class="btn btn-sm btn-success"
                           href="/teacher/grades/add/@student.Id/@SubjectId">
                            <i class="bi bi-plus-circle"></i> Dodaj ocenę
                        </a>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }

    @if (selectedGrade != null)
    {
        <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Szczegóły oceny</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal"></button>
                    </div>
                    <div class="modal-body">
                        <p><strong>Wartość:</strong> @selectedGrade.Value</p>
                        <p><strong>Waga:</strong> @selectedGrade.Weight</p>
                        <p><strong>Opis:</strong> @selectedGrade.Description</p>
                        <p><strong>Data:</strong> @selectedGrade.DateGiven.ToString("yyyy-MM-dd")</p>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-warning" @onclick="EditGrade">
                            <i class="bi bi-pencil"></i> Edytuj
                        </button>
                        <button class="btn btn-danger" @onclick="DeleteGrade">
                            <i class="bi bi-trash"></i> Usuń
                        </button>
                        <button class="btn btn-secondary" @onclick="CloseModal">Zamknij</button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>


@code {
    [Parameter] public int ClassId { get; set; }

    private List<UserDto>? students;
    private Dictionary<string, List<GradeDto>> gradesByStudent = new();
    private string? SubjectId;
    private string ClassName = "";
    private bool loading = true;

    private GradeDto? selectedGrade;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        var teacherId = user.FindFirst("sub")?.Value ??
                        user.FindFirst("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")?.Value;

        if (string.IsNullOrEmpty(teacherId)) return;

        students = await TeacherService.GetStudentsInClassAsync(ClassId);

        var ts = (await TeacherService.GetTeacherSubjectsAsync(teacherId))
            .FirstOrDefault(t => t.ClassId == ClassId);

        if (ts is null)
        {
            loading = false;
            return;
        }

        SubjectId = ts.SubjectId;

        var classList = await TeacherService.GetClassesForTeacherAsync(teacherId);
        ClassName = classList.FirstOrDefault(c => c.Id == ClassId)?.Name ?? $"#{ClassId}";

        gradesByStudent = await TeacherService
            .GetGradesForClassAndSubjectByTeacherAsync(ClassId, SubjectId, teacherId);

        loading = false;
    }

    private void ShowGradeModal(GradeDto grade)
    {
        selectedGrade = grade;
    }

    private void CloseModal()
    {
        selectedGrade = null;
    }

    private void EditGrade()
    {
        if (selectedGrade is not null)
        {
            Navigation.NavigateTo($"/teacher/grades/edit/{selectedGrade.Id}");
        }
    }

    private async Task DeleteGrade()
    {
        if (selectedGrade is not null)
        {
            await TeacherService.DeleteGradeAsync(selectedGrade.Id);
            selectedGrade = null;

            // Twarde przeładowanie strony po usunięciu
            Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
        }
    }

}
