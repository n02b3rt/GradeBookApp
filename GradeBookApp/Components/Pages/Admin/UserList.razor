@page "/admin/dashboard/users"
@rendermode InteractiveServer
@using GradeBookApp.Services
@using GradeBookApp.Shared
@inject UserService UserService
@inject NavigationManager NavigationManager

<h3>Lista użytkowników</h3>

<EditForm Model="searchModel" OnValidSubmit="HandleSearch">
    <InputText @bind-Value="searchModel.Query" placeholder="Wyszukaj po username, email, imieniu, nazwisku" class="form-control mb-3" />
    <button type="submit" class="btn btn-primary mb-3">Szukaj</button>
</EditForm>

@if (users == null)
{
    <p>Ładowanie...</p>
}
else if (users.Count == 0)
{
    <p>Brak użytkowników</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>UserName</th>
                <th>Email</th>
                <th>Imię</th>
                <th>Nazwisko</th>
                <th>Akcje</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.UserName</td>
                    <td>@user.Email</td>
                    <td>@user.FirstName</td>
                    <td>@user.LastName</td>
                    <td>
                        <button @onclick="() => EditUser(user.Id)" class="btn btn-sm btn-secondary">Edytuj</button>
                        <button @onclick="() => DeleteUser(user.Id)" class="btn btn-sm btn-danger">Usuń</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<UserDto>? users;
    private SearchModel searchModel = new();

    protected override async Task OnInitializedAsync()
    {
        users = await UserService.GetUsersAsync();
    }

    private async Task HandleSearch()
    {
        users = await UserService.SearchUsersAsync(searchModel.Query);
    }

    private void EditUser(string id)
    {
        NavigationManager.NavigateTo($"/admin/dashboard/users/edit/{id}");
    }

    private async Task DeleteUser(string id)
    {
        var result = await UserService.DeleteUserAsync(id);
        if (result.Succeeded)
        {
            users = await UserService.GetUsersAsync();
            StateHasChanged();
        }
        else
        {
            // Obsłuż błąd usuwania
        }
    }

    private class SearchModel
    {
        public string Query { get; set; } = string.Empty;
    }
}
