@page "/admin/dashboard/classes"
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

<h2 class="mb-4 fw-bold text-dark">📚 Lista klas</h2>

<div class="d-flex justify-content-between align-items-center mb-3">
    <button @onclick="ShowAddClass" class="btn btn-warning text-white fw-semibold">
        ➕ Dodaj klasę
    </button>
</div>

@if (classes == null)
{
    <div class="text-muted">Ładowanie danych klas...</div>
}
else if (classes.Count == 0)
{
    <div class="alert alert-info">Brak dostępnych klas.</div>
}
else
{
    <div class="table-responsive shadow-sm rounded">
        <table class="table table-striped table-hover align-middle">
            <thead class="table-light">
                <tr>
                    <th>Nazwa</th>
                    <th>Rok</th>
                    <th>Wychowawca</th>
                    <th class="text-end">Akcje</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var c in classes)
                {
                    <tr>
                        <td>@c.Name</td>
                        <td>@c.Year</td>
                        <td>@(string.IsNullOrEmpty(c.Teacher?.FirstName) ? "<i>brak</i>" : c.Teacher.UserName)</td>
                        <td class="text-end">
                            <button @onclick="() => EditClass(c.Id)" class="btn btn-sm btn-outline-secondary me-1">
                                ✏️ Edytuj
                            </button>
                            <button @onclick="() => DeleteClass(c.Id)" class="btn btn-sm btn-outline-danger">
                                🗑️ Usuń
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<ClassDto>? classes;

    protected override async Task OnInitializedAsync()
    {
        await ReloadClasses();
    }

    private async Task ReloadClasses()
    {
        classes = await Http.GetFromJsonAsync<List<ClassDto>>("api/classes");
        StateHasChanged();
    }

    private void ShowAddClass()
    {
        Navigation.NavigateTo("/admin/dashboard/classes/add");
    }

    private void EditClass(int id)
    {
        Navigation.NavigateTo($"/admin/dashboard/classes/edit/{id}");
    }

    private async Task DeleteClass(int id)
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Usunąć klasę?");
        if (!confirmed) return;

        var resp = await Http.DeleteAsync($"api/classes/{id}");
        if (resp.IsSuccessStatusCode)
        {
            await ReloadClasses();
        }
        else
        {
            // Można dodać np. toastr albo alert
        }
    }

    public class ClassDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public int Year { get; set; }
        public UserDto? Teacher { get; set; }
    }

    public class UserDto
    {
        public string Id { get; set; } = "";
        public string UserName { get; set; } = "";
    }
}
