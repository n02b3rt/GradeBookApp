@attribute [Authorize(Roles = "Admin")]
@page "/admin/dashboard/classes/edit/{ClassId:int}"
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager Navigation

@using GradeBookApp.Shared
@using Microsoft.AspNetCore.Authorization

<div class="container mt-4">
    <h2 class="mb-4 fw-bold text-dark">✏️ Edytuj klasę</h2>

    @if (editClass == null)
    {
        <div class="text-muted">⏳ Ładowanie danych klasy...</div>
    }
    else
    {
        <div class="card shadow-sm border-0 mb-4">
            <div class="card-body">
                <EditForm Model="editClass" OnValidSubmit="HandleValidSubmit" FormName="EditClassForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="mb-3 text-danger" />

                    <div class="mb-3">
                        <label class="form-label fw-semibold">📛 Nazwa klasy</label>
                        <InputText class="form-control" @bind-Value="editClass.Name" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-semibold">📅 Rok rozpoczęcia</label>
                        <InputNumber class="form-control" @bind-Value="editClass.Year" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-semibold">👨‍🏫 Wychowawca</label>
                        <select class="form-select" @bind="editClass.TeacherId">
                            <option value="">-- Wybierz wychowawcę --</option>
                            @if (teachers != null)
                            {
                                @foreach (var t in teachers)
                                {
                                    <option value="@t.Id">@t.FirstName @t.LastName (@t.Email)</option>
                                }
                            }
                        </select>
                    </div>

                    <div class="d-flex justify-content-end">
                        <button type="submit" class="btn btn-warning text-white fw-semibold me-2">
                            💾 Zapisz zmiany
                        </button>
                        <button type="button" class="btn btn-outline-secondary" @onclick="Cancel">
                            ❌ Anuluj
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert alert-info">@message</div>
    }
</div>

@code {
    [Parameter]
    public int ClassId { get; set; }

    private ClassEditModel? editClass;
    private List<UserDto>? teachers;
    private string? message;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            editClass = await Http.GetFromJsonAsync<ClassEditModel>($"api/classes/{ClassId}");
            teachers = await Http.GetFromJsonAsync<List<UserDto>>("api/teachers");
        }
        catch (Exception ex)
        {
            message = $"❗ Błąd podczas ładowania danych: {ex.Message}";
        }
    }

    async Task HandleValidSubmit()
    {
        if (editClass == null) return;

        try
        {
            var resp = await Http.PutAsJsonAsync($"api/classes/{ClassId}", editClass);
            if (resp.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/admin/dashboard/classes");
            }
            else
            {
                var error = await resp.Content.ReadAsStringAsync();
                message = $"❗ Błąd przy edycji: {error}";
            }
        }
        catch (Exception ex)
        {
            message = $"❗ Błąd podczas zapisu: {ex.Message}";
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/admin/dashboard/classes");
    }

    public class ClassEditModel
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public int Year { get; set; }
        public string TeacherId { get; set; } = "";
    }
}
