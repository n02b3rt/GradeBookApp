@page "/admin/dashboard/classes/add"
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager Navigation

@using GradeBookApp.Shared

<div class="container py-4">
    <h2 class="mb-4 fw-bold text-dark">➕ Dodaj nową klasę</h2>

    <div class="card shadow-sm border-0 mb-4">
        <div class="card-body">
            <EditForm Model="newClass" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary class="mb-3 text-danger" />

                <div class="mb-3">
                    <label class="form-label fw-semibold">📛 Nazwa klasy</label>
                    <InputText class="form-control" @bind-Value="newClass.Name" />
                </div>

                <div class="mb-3">
                    <label class="form-label fw-semibold">📅 Rok rozpoczęcia</label>
                    <InputNumber class="form-control" @bind-Value="newClass.Year" />
                </div>

                <div class="mb-3">
                    <label class="form-label fw-semibold">👨‍🏫 Wychowawca</label>
                    <select class="form-select" @bind="newClass.TeacherId">
                        <option value="">-- Wybierz wychowawcę --</option>
                        @if (teachers != null)
                        {
                            @foreach (var t in teachers)
                            {
                                <option value="@t.Id">@t.FullName (@t.Email)</option>
                            }
                        }
                    </select>
                </div>

                <div class="d-flex justify-content-end">
                    <button type="submit" class="btn btn-warning text-white fw-semibold me-2">
                        💾 Zapisz
                    </button>
                    <button type="button" class="btn btn-outline-secondary" @onclick="Cancel">
                        ❌ Anuluj
                    </button>
                </div>
            </EditForm>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert alert-info">@message</div>
    }
</div>

@code {
    private ClassAddModel newClass = new();
    private string? message;
    private List<UserDto>? teachers;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            teachers = await Http.GetFromJsonAsync<List<UserDto>>("api/teachers");
        }
        catch (Exception ex)
        {
            message = $"❗ Błąd podczas pobierania nauczycieli: {ex.Message}";
        }
    }

    async Task HandleValidSubmit()
    {
        message = null;
        try
        {
            var resp = await Http.PostAsJsonAsync("api/classes", newClass);
            if (resp.IsSuccessStatusCode)
            {
                NavigateToList();
            }
            else
            {
                var errorContent = await resp.Content.ReadAsStringAsync();
                message = $"❗ Błąd podczas dodawania klasy: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            message = $"❗ Wystąpił wyjątek: {ex.Message}";
        }
    }

    private void Cancel()
    {
        NavigateToList();
    }

    private void NavigateToList()
    {
        Navigation.NavigateTo("/admin/dashboard/classes");
    }

    public class ClassAddModel
    {
        public string Name { get; set; } = string.Empty;
        public int Year { get; set; }
        public string TeacherId { get; set; } = string.Empty;
    }
}
