@attribute [Authorize(Roles = "Admin")]
@page "/admin/db"
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer

@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<div class="card mt-4 mx-auto" style="max-width: 600px;">
    <div class="card-body">
        <h5 class="card-title mb-3">Administrowanie bazą danych</h5>

        @if (isLoading)
        {
            <div class="d-flex align-items-center mb-3">
                <div class="spinner-border text-primary me-2" role="status">
                    <span class="visually-hidden">Ładowanie…</span>
                </div>
                <span>Ładuję aktualny stan bazy…</span>
            </div>
        }
        else if (loadError is not null)
        {
            <div class="alert alert-danger mb-3" role="alert">
                <strong>Błąd:</strong> @loadError
            </div>
        }
        else
        {
            <div class="mb-3">
                <label class="form-label"><strong>Aktualnie:</strong>
                    <span class="badge @(useBackup ? "bg-secondary" : "bg-primary")">
                        @(useBackup ? "Backup" : "Primary")
                    </span>
                </label>
            </div>

            <div class="mb-3 row">
                <div class="col-6">
                    <label for="dbSelect" class="form-label">Wybierz bazę:</label>
                    <select class="form-select" id="dbSelect" @bind="selectedOption">
                        <option value="Primary">Primary</option>
                        <option value="Backup">Backup</option>
                    </select>
                </div>
                <div class="col-6 text-end align-self-end">
                    <button class="btn btn-success me-2" @onclick="OnSubmitAsync" disabled="@isSubmitting">
                        @if (isSubmitting)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status">
                                <span class="visually-hidden">Ładowanie…</span>
                            </span>
                            <span>Zapisuję…</span>
                        }
                        else
                        {
                            <span>Zapisz</span>
                        }
                    </button>
                    <button class="btn btn-warning" @onclick="OnSyncAsync" disabled="@isSyncing">
                        @if (isSyncing)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status">
                                <span class="visually-hidden">Synchronizacja…</span>
                            </span>
                            <span>Synchronizuję…</span>
                        }
                        else
                        {
                            <span>Synchronizuj</span>
                        }
                    </button>
                </div>
            </div>

            @if (syncMessage is not null)
            {
                <div class="alert alert-info mt-3">
                    @syncMessage
                </div>
            }
        }
    </div>
</div>

@code {
    private bool useBackup;
    private bool isLoading = true;
    private bool isSubmitting = false;
    private bool isSyncing = false;
    private string? loadError;
    private string selectedOption = "Primary";
    private string? syncMessage;
    private int studentsCount = -1;

    private class StatusResponse { public bool UseBackup { get; set; } }

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await Task.WhenAll(LoadStatusAsync(), LoadStudentsCountAsync());
        isLoading = false;
    }

    private async Task LoadStatusAsync()
    {
        try
        {
            var status = await Http.GetFromJsonAsync<StatusResponse>("api/db/status");
            if (status is not null)
            {
                useBackup = status.UseBackup;
                selectedOption = useBackup ? "Backup" : "Primary";
            }
            else
            {
                loadError = "Nie otrzymano statusu z serwera.";
            }
        }
        catch (Exception ex)
        {
            loadError = ex.Message;
        }
    }

    private async Task LoadStudentsCountAsync()
    {
        try
        {
            var result = await Http.GetStringAsync("api/users/count");
            studentsCount = int.TryParse(result, out var count) ? count : -1;
        }
        catch
        {
            studentsCount = -1;
        }
    }


    private async Task OnSubmitAsync()
    {
        isSubmitting = true;
        syncMessage = null;
        bool newUseBackup = selectedOption == "Backup";

        try
        {
            var payload = new { UseBackup = newUseBackup };
            var response = await Http.PostAsJsonAsync("api/db/switch", payload);

            if (!response.IsSuccessStatusCode)
            {
                var errorDto = await response.Content.ReadFromJsonAsync<Dictionary<string, object>>();
                string serverMsg = (errorDto != null && errorDto.TryGetValue("error", out var err))
                    ? err?.ToString() ?? "Nieznany błąd"
                    : "Nieznany błąd";

                await JS.InvokeVoidAsync("alert", $"Błąd przy przełączaniu bazy:\n{serverMsg}");
                selectedOption = useBackup ? "Backup" : "Primary";
            }
            else
            {
                Navigation.NavigateTo(Navigation.Uri, forceLoad: true);
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Wyjątek podczas komunikacji z API:\n{ex.Message}");
            selectedOption = useBackup ? "Backup" : "Primary";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task OnSyncAsync()
    {
        isSyncing = true;
        syncMessage = null;

        try
        {
            var response = await Http.PostAsync("api/db/sync", null);
            if (!response.IsSuccessStatusCode)
            {
                var errorDto = await response.Content.ReadFromJsonAsync<Dictionary<string, object>>();
                string serverMsg = (errorDto != null && errorDto.TryGetValue("error", out var err))
                    ? err?.ToString() ?? "Nieznany błąd"
                    : "Nieznany błąd";

                await JS.InvokeVoidAsync("alert", $"Błąd podczas synchronizacji:\n{serverMsg}");
            }
            else
            {
                var result = await response.Content.ReadFromJsonAsync<Dictionary<string, string>>();
                if (result != null && result.TryGetValue("message", out var msg))
                {
                    syncMessage = msg;
                }
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Wyjątek podczas synchronizacji:\n{ex.Message}");
        }
        finally
        {
            isSyncing = false;
        }
    }
}
