@attribute [Authorize(Roles = "Admin")]
@page "/admin/dashboard/subjects/edit/{Id}"
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager Navigation

@using GradeBookApp.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms

<div class="container">
    <h2 class="mb-4 fw-bold text-dark">✏️ Edytuj przedmiot</h2>

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert alert-info">@message</div>
    }

    @if (subject == null)
    {
        <div class="text-muted">⏳ Ładowanie danych...</div>
    }
    else
    {
        <div class="card shadow-sm border-0 mb-4">
            <div class="card-body">
                <EditForm Model="subject" OnValidSubmit="HandleValidSubmit" FormName="EditSubjectForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="mb-3 text-danger" />

                    <div class="mb-3">
                        <label class="form-label fw-semibold">📘 Nazwa przedmiotu</label>
                        <InputText class="form-control" @bind-Value="subject.Name" />
                        <ValidationMessage For="() => subject.Name" class="text-danger" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-semibold">🔤 Skrót</label>
                        <InputText class="form-control" @bind-Value="subject.ShortName" />
                        <ValidationMessage For="() => subject.ShortName" class="text-danger" />
                    </div>

                    <!-- Dropdown wyboru nauczyciela -->
                    <div class="mb-3">
                        <label class="form-label fw-semibold">👩‍🏫 Wybierz nauczyciela</label>
                        <InputSelect class="form-select" @bind-Value="selectedTeacherId">
                            <option value="">-- wybierz nauczyciela --</option>
                            @foreach (var t in teachers)
                            {
                                <option value="@t.Id">@t.FullName</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="() => selectedTeacherId" class="text-danger" />
                    </div>

                    <div class="d-flex justify-content-end">
                        <button type="submit" class="btn btn-warning text-white fw-semibold me-2">
                            💾 Zapisz zmiany
                        </button>
                        <button type="button" class="btn btn-outline-secondary" @onclick="Cancel">
                            ❌ Anuluj
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string Id { get; set; } = "";

    private SubjectDto? subject;
    private TeacherSubjectDto? existingAssignment; // używane tylko do usunięcia pojedynczego pobranego, ale będziemy usuwać wszystkie
    private List<UserDto> teachers = new();
    private List<ClassDto> classes = new();
    private string selectedTeacherId = "";
    private string? message;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 1. Wczytaj SubjectDto
            subject = await Http.GetFromJsonAsync<SubjectDto>($"api/subjects/{Id}");
            if (subject == null)
            {
                message = "❗ Nie znaleziono przedmiotu.";
                return;
            }

            // 2. Wczytaj nauczycieli (rola "Teacher")
            teachers = await Http.GetFromJsonAsync<List<UserDto>>("api/teachers")
                       ?? new List<UserDto>();

            // 3. Wczytaj wszystkie klasy
            classes = await Http.GetFromJsonAsync<List<ClassDto>>("api/classes")
                      ?? new List<ClassDto>();

            // 4. Wczytaj jedno przykładowe przypisanie (jeśli istnieje)
            existingAssignment = await Http.GetFromJsonAsync<TeacherSubjectDto>($"api/subjects/{Id}/assignment");
            if (existingAssignment != null)
            {
                selectedTeacherId = existingAssignment.TeacherId;
            }
        }
        catch (Exception ex)
        {
            message = $"❗ Błąd ładowania: {ex.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        if (subject == null)
            return;

        if (string.IsNullOrWhiteSpace(selectedTeacherId))
        {
            message = "❗ Musisz wybrać nauczyciela.";
            return;
        }

        try
        {
            // 1️⃣ Zaktualizuj nazwę i skrót przedmiotu
            var updateResp = await Http.PutAsJsonAsync($"api/subjects/{Id}", subject);
            if (!updateResp.IsSuccessStatusCode)
            {
                var error = await updateResp.Content.ReadAsStringAsync();
                message = $"❗ Błąd aktualizacji przedmiotu: {error}";
                return;
            }

            // 2️⃣ Usuń WSZYSTKIE istniejące przypisania tego przedmiotu
            var existingList = await Http.GetFromJsonAsync<List<TeacherSubjectDto>>($"api/subjects/{Id}/all-assignments");
            if (existingList != null)
            {
                foreach (var assign in existingList)
                {
                    await Http.DeleteAsync($"api/teachersubjects/{assign.Id}");
                }
            }

            // 3️⃣ Utwórz nowe przypisania dla każdej klasy
            foreach (var c in classes)
            {
                var assignDto = new AssignTeacherSubjectDto
                {
                    SubjectId = Id,
                    TeacherId = selectedTeacherId,
                    ClassId = c.Id
                };
                var assignResp = await Http.PostAsJsonAsync("api/teachersubjects", assignDto);
                if (!assignResp.IsSuccessStatusCode)
                {
                    var errorAssign = await assignResp.Content.ReadAsStringAsync();
                    message = $"❗ Błąd przy przypisywaniu nauczyciela do klasy {c.Name}: {errorAssign}";
                    return;
                }
            }

            // 4️⃣ Sukces → przekierowanie
            Navigation.NavigateTo("/admin/dashboard/subjects");
        }
        catch (Exception ex)
        {
            message = $"❗ Błąd: {ex.Message}";
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/admin/dashboard/subjects");
    }

    private class ClassDto
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
    }

    private class AssignTeacherSubjectDto
    {
        public string TeacherId { get; set; } = string.Empty;
        public string SubjectId { get; set; } = string.Empty;
        public int ClassId { get; set; }
    }
}
