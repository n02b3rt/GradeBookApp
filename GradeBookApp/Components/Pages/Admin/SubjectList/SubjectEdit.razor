@page "/admin/dashboard/subjects/edit/{Id}"
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager Navigation

@using GradeBookApp.Shared
@using Microsoft.AspNetCore.Components.Forms
<div class="container">
    <h2 class="mb-4 fw-bold text-dark">✏️ Edytuj przedmiot</h2>

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert alert-info">@message</div>
    }

    @if (subject == null)
    {
        <div class="text-muted">⏳ Ładowanie danych...</div>
    }
    else
    {
        <div class="card shadow-sm border-0 mb-4">
            <div class="card-body">
                <EditForm Model="subject" OnValidSubmit="HandleValidSubmit" FormName="EditSubjectForm">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="mb-3 text-danger" />

                    <div class="mb-3">
                        <label class="form-label fw-semibold">📘 Nazwa przedmiotu</label>
                        <InputText class="form-control" @bind-Value="subject.Name" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label fw-semibold">🔤 Skrót</label>
                        <InputText class="form-control" @bind-Value="subject.ShortName" />
                    </div>

                    <div class="d-flex justify-content-end">
                        <button type="submit" class="btn btn-warning text-white fw-semibold me-2">
                            💾 Zapisz zmiany
                        </button>
                        <button type="button" class="btn btn-outline-secondary" @onclick="Cancel">
                            ❌ Anuluj
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    }
</div>


@code {
    [Parameter]
    public string Id { get; set; } = "";

    private SubjectDto? subject;
    private string? message;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            subject = await Http.GetFromJsonAsync<SubjectDto>($"api/subjects/{Id}");
            if (subject == null)
            {
                message = "❗ Nie znaleziono przedmiotu.";
            }
        }
        catch (Exception ex)
        {
            message = $"❗ Błąd ładowania: {ex.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            var response = await Http.PutAsJsonAsync($"api/subjects/{Id}", subject);
            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/admin/dashboard/subjects");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                message = $"❗ Błąd aktualizacji: {error}";
            }
        }
        catch (Exception ex)
        {
            message = $"❗ Błąd: {ex.Message}";
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/admin/dashboard/subjects");
    }
}
