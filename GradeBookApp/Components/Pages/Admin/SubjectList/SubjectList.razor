@attribute [Authorize(Roles = "Admin")]
@page "/admin/dashboard/subjects"
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JsRuntime

@using GradeBookApp.Shared
@using Microsoft.AspNetCore.Authorization

<div class="container">
    <h2 class="mb-4 fw-bold text-dark">📘 Lista przedmiotów</h2>

    <div class="d-flex justify-content-between align-items-center mb-3">
        <button @onclick="AddSubject" class="btn btn-primary fw-semibold">
            ➕ Dodaj przedmiot
        </button>
    </div>

    @if (subjects == null)
    {
        <div class="text-muted">⏳ Ładowanie przedmiotów...</div>
    }
    else if (subjects.Count == 0)
    {
        <div class="alert alert-info">Brak zarejestrowanych przedmiotów.</div>
    }
    else
    {
        <div class="table-responsive shadow-sm rounded">
            <table class="table table-striped table-hover align-middle">
                <thead class="table-light">
                    <tr>
                        <th>Nazwa</th>
                        <th>Skrót</th>
                        <th class="text-end">Akcje</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var subject in subjects)
                    {
                        <tr>
                            <td>@subject.Name</td>
                            <td>@subject.ShortName</td>
                            <td class="text-end">
                                <button class="btn btn-sm btn-outline-secondary me-1" @onclick="() => EditSubject(subject.Id)">
                                    ✏️ Edytuj
                                </button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => DeleteSubject(subject.Id)">
                                    🗑️ Usuń
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert alert-info mt-3">@message</div>
    }
</div>

@code {
    private List<SubjectDto>? subjects;
    private string? message;

    protected override async Task OnInitializedAsync()
    {
        await LoadSubjects();
    }

    private async Task LoadSubjects()
    {
        try
        {
            subjects = await Http.GetFromJsonAsync<List<SubjectDto>>("api/subjects");
            message = null;
        }
        catch (Exception ex)
        {
            message = $"❗ Błąd ładowania: {ex.Message}";
        }
    }

    private void AddSubject()
    {
        Navigation.NavigateTo("/admin/dashboard/subjects/add");
    }

    private void EditSubject(string id)
    {
        Navigation.NavigateTo($"/admin/dashboard/subjects/edit/{id}");
    }

    private async Task DeleteSubject(string id)
    {
        var confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Czy na pewno chcesz usunąć przedmiot?");
        if (!confirmed) return;

        var resp = await Http.DeleteAsync($"api/subjects/{id}");
        if (resp.IsSuccessStatusCode)
        {
            await LoadSubjects();
        }
        else
        {
            message = "❗ Nie udało się usunąć przedmiotu.";
        }
    }
}
