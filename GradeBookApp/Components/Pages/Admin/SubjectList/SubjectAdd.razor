@attribute [Authorize(Roles = "Admin")]
@page "/admin/dashboard/subjects/add"
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager Navigation

@using GradeBookApp.Shared
@using Microsoft.AspNetCore.Authorization

<div class="container my-4">
    <h2 class="mb-4 fw-bold text-dark">➕ Dodaj nowy przedmiot</h2>

    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert alert-info">@message</div>
    }

    <div class="card shadow-sm border-0">
        <div class="card-body">
            <EditForm Model="newSubject" OnValidSubmit="HandleValidSubmit" FormName="AddSubjectForm">
                <DataAnnotationsValidator />
                <ValidationSummary class="mb-3 text-danger" />

                <div class="mb-3">
                    <label class="form-label fw-semibold text-dark">📘 Nazwa przedmiotu</label>
                    <InputText class="form-control" @bind-Value="newSubject.Name" placeholder="Np. Matematyka" />
                </div>

                <div class="mb-3">
                    <label class="form-label fw-semibold text-dark">🔤 Skrót</label>
                    <InputText class="form-control" @bind-Value="newSubject.ShortName" placeholder="Np. MATH" />
                </div>

                <div class="d-flex justify-content-end">
                    <button type="submit" class="btn btn-success fw-semibold me-2">
                        💾 Zapisz
                    </button>
                    <button type="button" class="btn btn-outline-secondary" @onclick="Cancel">
                        ❌ Anuluj
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private SubjectDto newSubject = new();
    private string? message;

    private async Task HandleValidSubmit()
    {
        try
        {
            var resp = await Http.PostAsJsonAsync("api/subjects", newSubject);
            if (resp.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/admin/dashboard/subjects");
            }
            else
            {
                var error = await resp.Content.ReadAsStringAsync();
                message = $"❗ Błąd przy dodawaniu: {error}";
            }
        }
        catch (Exception ex)
        {
            message = $"❗ Wyjątek: {ex.Message}";
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/admin/dashboard/subjects");
    }
}
